# DockerExercises
The repository to exercise with docker

Observe the study.txt file
All following examples are valid only using the UBUNTU_SERVER as main or parental or physical OS
First of all, to have an ability to work with docker - install following applications:

sudo apt-get remove docker docker-engine docker.io containerd runc                To remove the previous versions of docker
sudo apt-get update                                                               To update list of connected repositories
sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
                                                                                  To install additional useful service applications
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -      To add docker official gpg key
sudo apt-key fingerprint 0EBFCD88                                                 To verify docker official gpg key is added
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      To add only stable docker repository to the repositories list
sudo apt-get update                   To update list of connected repositories
sudo apt-get install docker-ce        To install the docker from attached repositories
sudo systemctl status docker          To verify docker daemon is running
docker -v                             To check the docker version
sudo docker run hello-world           To pull and run "hello-world" image and verify containers are run-able
sudo docker ps                        To list running images
sudo usermod -aG docker $USER; exit   To add current user to "docker:x:999:" group and re-login

To create your own image configure "Dockerfile" in a separate directory using followings CMDs:
To list all available images in the images repository - just surf the https://hub.docker.com/search?q=&type=image
or type "docker search {imageName}" in your shell
FROM, RUN, COPY, and ADD      Instructions such create separate layer
FROM ubuntu:22.04                           Any Dockerfile should start with FROM and significant the base image
LABEL maintainer="eugenstadnik@gmail.com"   Just a useful info (metadata) about current image
ENV ADMIN="eugen"                           To set up environment variables
RUN sudo apt-get update && sudo apt-get upgrade && sudo apt-get install   To run CMDs on container during start (creates separate layer)
RUN ["mkdir", "/a_directory"]                                             Just Exec-notation of RUN command
COPY /path/to/local/folder/localfile.txt /path/to/container/folder/       To copy local files to container virtual drive (will create destination directory when no such)
ADD https://raw.githubusercontent.com/discdiver/pachy-vid/master/sample_vids/vid1.mp4 \
/my_app_directory                   Almost the same as COPY but allows to add file from external sources or decompress local .tar files (Better use COPY)
CMD ["python", "./my_script.py"]    Executes command on container launch (one dockerfile should contain only one CMD, the most last will be executed)
# Regular dockerfile comment
WORKDIR /usr/src/my_app_directory
ARG my_var=my_default_value
ENTRYPOINT ["python", "./app/my_script.py", "my_var"]
EXPOSE 8000
VOLUME /my_volume
# Official reference https://docs.docker.com/engine/reference/builder/#dockerfile-reference
# More instructions https://kapeli.com/cheat_sheets/Dockerfile.docset/Contents/Resources/Documents/index

One more important document to configure docker image(s) is a docker-compose.yaml file
User can create as many docker-compose-service.yaml, docker-compose-local.yaml, docker-compose-global.yaml files as many configurations needed
Observe compose.yaml file in the root folder of the project
docker compose --help                                               To invoke general reference info
docker compose up                                                   To start container from the default compose.yaml config file
Example
docker compose -f ./docker-compose-service.yaml up -d --build       Composes containers from a file specified after -f key
                                                                    --build(s) images before starting containers
                                                                    and start them "up" in a -d(etached) background mode
For more info refer to https://docs.docker.com/compose/

To manage docker images and containers use following CMDs:
To create your own image configure "Dockerfile" in a separate directory then run:
docker build -t {customImageName}:{customImageVersion} {folderToPlaceImage}                                When Dockerfile is placed in the current directory
docker build -f {pathToDockerfile} -t {customImageName}:{customImageVersion} {folderToPlaceImage}          When Dockerfile is placed in an other directory
docker login -u {userName} -p {password}              To login to docker hub before push and/or pull
docker push {userName}/{imageName}:{imageVersion}     To push to docker hub
docker pull {imageName}                               To pull specified image
docker pull {userName}/{imageName}:{imageVersion}     To pull your own image
docker images                                         To list all available local docker images
docker tag {imageName}:{imageVersion} {newImageName}:{newImageVersion}      To copy the image
docker run {imageName}                                To pull if not pulled and run specified image
docker run -d {imageName}                             To pull if not pulled and run specified image as a deamon
docker run -it -p {outerPort}:{innerPost} {imageName}:{imageVersion}
      To pull if not pulled and run specified image interactively and redirect internal container's {innerPort} port to external {outerPort}
docker run --name {customContainerName} {imageName}:{imageVersion}
      To run container with custom container's name
docker ps                                       To list running images
docker ps -a                                    To show all containers ever ran
docker exec {containerName} {shellCMD}          To run command inside the container
docker exec -it {containerName} /bin/bash       To get the container's shell instead of ssh
docker cp {localPathToFile} {containerId}:{containerPath}     To copy files inside the container instead of scp
docker cp {containerId}:{containerPathToFile} {localPath}     To copy file from container to local instead of scp
docker commit {containerId} {newImageName}:{newImageVersion}      To create image from running container saving all it's state
docker stop {containerId} | {containerName}     To gently stop the container
docker kill {containerId} | {containerName}     To force stop the container
docker start {containerId} | {containerName}    To restart already stopped container with the all it's state

docker rm {containerId}                         To remove container only when it is not running
docker rmi {imageName:version} | {imageId}      To remove image only when no containers left
docker image rm --force {imageName:version}     To remove local image without container (decreases hdd free space)
